ParallerExpression[l=0,c=1]:
    SequenceExpression[l=0,c=1]:
        SequenceExpression[l=0,c=1]:
            NoteExpression[l=0,c=1]:
                pitch: E
                octave:
                    IntLiteral[l=0,c=5]: 4
                duration: w
            NoteExpression[l=0,c=12]:
                pitch: G
                octave:
                    IntLiteral[l=0,c=16]: 4
                duration: w
        NoteExpression[l=0,c=23]:
            pitch: D
            octave:
                IntLiteral[l=0,c=27]: 4
            duration: w
    SequenceExpression[l=0,c=36]:
        SequenceExpression[l=0,c=36]:
            NoteExpression[l=0,c=36]:
                pitch: C
                octave:
                    IntLiteral[l=0,c=40]: 4
                duration: w
            NoteExpression[l=0,c=47]:
                pitch: D
                octave:
                    IntLiteral[l=0,c=51]: 4
                duration: w
        NoteExpression[l=0,c=58]:
            pitch: F
            octave:
                IntLiteral[l=0,c=62]: 4
            duration: w
PipeExpression[l=1,c=0]:
    inlineFuncCall: harm
    ModifierExpression[l=1,c=0]:
        modifier:
            name: dur
            value:
                NoteExpression[l=1,c=45]:
                    duration: w
            name: oct
            value:
                IntLiteral[l=1,c=52]: 4
        ArrayExpression[l=1,c=0]:
            PipeExpression[l=1,c=2]:
                inlineFuncCall: mel
                ArrayExpression[l=1,c=2]:
                    NoteExpression[l=1,c=3]:
                        pitch: E
                    NoteExpression[l=1,c=6]:
                        pitch: G
                    NoteExpression[l=1,c=9]:
                        pitch: D
            PipeExpression[l=1,c=22]:
                inlineFuncCall: mel
                ArrayExpression[l=1,c=22]:
                    NoteExpression[l=1,c=23]:
                        pitch: C
                    NoteExpression[l=1,c=26]:
                        pitch: D
                    NoteExpression[l=1,c=29]:
                        pitch: F
Declaration[l=3,c=0]:
    type: inference
    name: a
    PipeExpression[l=3,c=8]:
        inlineFuncCall: mel
        ModifierExpression[l=3,c=8]:
            modifier:
                name: oct
                value:
                    IntLiteral[l=3,c=22]: 4
            ArrayExpression[l=3,c=8]:
                NoteExpression[l=3,c=9]:
                    pitch: E
                NoteExpression[l=3,c=12]:
                    pitch: G
                NoteExpression[l=3,c=15]:
                    pitch: D
Declaration[l=5,c=0]:
    type: inference
    name: b
    PipeExpression[l=5,c=8]:
        inlineFuncCall: track
            arguments:
                variableReference[l=10,c=14]: Guitar
        PipeExpression[l=5,c=8]:
            inlineFuncCall: harm
            PipeExpression[l=5,c=8]:
                inlineFuncCall: concat
                    arguments:
                        variableReference[l=8,c=15]: a
                PipeExpression[l=5,c=8]:
                    inlineFuncCall: transpose
                        arguments:
                            MinusUnaryExpression[l=7,c=19]:
                                IntLiteral[l=7,c=19]: 1
                    PipeExpression[l=5,c=8]:
                        inlineFuncCall: repeat
                            arguments:
                                CastExpresion[l=6,c=19]:
                                    type: Int
                                    floatLiteral: 2,000000
                        variableReference[l=5,c=8]: a
Declaration[l=12,c=0]:
    type: inference
    name: c
    PipeExpression[l=12,c=8]:
        inlineFuncCall: head
            arguments:
                PlusUnaryExpression[l=14,c=13]:
                    IntLiteral[l=14,c=13]: 100
        PipeExpression[l=12,c=8]:
            inlineFuncCall: open
                arguments:
                    variableReference[l=13,c=13]: Track
                    IntLiteral[l=13,c=20]: 0
            stringLiter: song.mid
Declaration[l=16,c=0]:
    LambdaType[l=16,c=0]:
        returnType:
            type: Int
        parameters:
            type: Int
            type: Int
    name: NWD
AssigmentStatement[l=18,c=0]:
    variable: NWD
    LambdaExpression[l=18,c=6]:
        parameters:
            name: a
            type: Int
            name: b
            type: Int
        returns:
            type: Int
        Block[l=18,c=30]:
            IfStatement[l=19,c=4]:
                condition:
                    NotEqExpression[l=19,c=7]:
                        variableReference[l=19,c=7]: b
                        IntLiteral[l=19,c=10]: 0
                Block[l=19,c=12]:
                    ReturnStatement[l=20,c=8]:
                        FunctionCall[l=20,c=15]:
                            name: NWD
                            arguments:
                                variableReference[l=20,c=19]: b
                                ModuloExpression[l=20,c=22]:
                                    variableReference[l=20,c=22]: a
                                    variableReference[l=20,c=24]: b
            ReturnStatement[l=22,c=4]:
                variableReference[l=22,c=11]: a
FunctionCall[l=24,c=0]:
    name: a
    arguments:
        IntLiteral[l=24,c=2]: 1
        LambdaExpression[l=24,c=5]:
            parameters:
            returns:
                type: Int
            Block[l=24,c=16]:
                FunctionCall[l=24,c=17]:
                    name: b
                    arguments:
                        IntLiteral[l=24,c=19]: 1
                FunctionCall[l=24,c=22]:
                    name: c
                    arguments:
                        IntLiteral[l=24,c=24]: 2
Declaration[l=25,c=0]:
    type: inference
    name: randGen
    LambdaExpression[l=25,c=14]:
        parameters:
            name: scale
            type: Scale
            name: rythm
            type: Rythm
        returns:
            type: Phrase
        Block[l=25,c=55]:
            IfStatement[l=26,c=4]:
                condition:
                    OrExpression[l=26,c=8]:
                        PipeExpression[l=26,c=8]:
                            inlineFuncCall: isEmpty
                            variableReference[l=26,c=8]: scale
                        PipeExpression[l=26,c=30]:
                            inlineFuncCall: isEmpty
                            variableReference[l=26,c=30]: rythm
                Block[l=26,c=48]:
                    PipeExpression[l=27,c=8]:
                        inlineFuncCall: panic
                        stringLiter: Provided scale or rythm is empty
            Declaration[l=30,c=4]:
                type: inference
                name: seed
                AddExpression[l=30,c=17]:
                    ModuloExpression[l=30,c=17]:
                        MulExpression[l=30,c=17]:
                            PipeExpression[l=30,c=17]:
                                inlineFuncCall: len
                                variableReference[l=30,c=17]: scale
                            PipeExpression[l=30,c=34]:
                                inlineFuncCall: len
                                variableReference[l=30,c=34]: rythm
                        IntLiteral[l=30,c=51]: 3
                    IntLiteral[l=30,c=53]: 1
            Declaration[l=31,c=4]:
                type: inference
                name: maxLen
                PipeExpression[l=31,c=17]:
                    inlineFuncCall: max
                    ArrayExpression[l=31,c=17]:
                        PipeExpression[l=31,c=19]:
                            inlineFuncCall: len
                            variableReference[l=31,c=19]: scale
                        PipeExpression[l=31,c=34]:
                            inlineFuncCall: len
                            variableReference[l=31,c=34]: rythm
            Declaration[l=32,c=4]:
                type: inference
                name: lowestNote
                PipeExpression[l=32,c=21]:
                    inlineFuncCall: argmin
                    variableReference[l=32,c=21]: scale
            Declaration[l=33,c=4]:
                type: Template
                name: form
            ForStatement[l=36,c=8]:
                Declaration[l=34,c=8]:
                    type: Int
                    name: i
                RangeExpression[l=34,c=17]:
                    IntLiteral[l=34,c=17]: 1
                    variableReference[l=34,c=20]: seed
                Block[l=34,c=25]:
                    Declaration[l=35,c=8]:
                        type: inference
                        name: line
                        PipeExpression[l=35,c=19]:
                            inlineFuncCall: mel
                            ListComprehension[l=35,c=19]:
                                variableReference[l=35,c=39]: dumb_temp
                                mapper:
                                    ModuloExpression[l=35,c=20]:
                                        FunctionCall[l=35,c=20]:
                                            name: rand
                                            arguments:
                                        variableReference[l=35,c=29]: maxLen
                                RangeExpression[l=35,c=49]:
                                    IntLiteral[l=35,c=49]: 1
                                    MulExpression[l=35,c=53]:
                                        AddExpression[l=35,c=53]:
                                            ModuloExpression[l=35,c=53]:
                                                FunctionCall[l=35,c=53]:
                                                    name: rand
                                                    arguments:
                                                IntLiteral[l=35,c=60]: 4
                                            IntLiteral[l=35,c=62]: 1
                                        variableReference[l=35,c=65]: maxLen
                    ParalerAssignStatement[l=36,c=8]:
                        variable: form
                        variableReference[l=36,c=16]: line
            ReturnStatement[l=39,c=4]:
                MulExpression[l=39,c=11]:
                    ConvolutionExpression[l=39,c=11]:
                        variableReference[l=39,c=11]: form
                        variableReference[l=39,c=17]: scale
                    ConvolutionExpression[l=39,c=23]:
                        variableReference[l=39,c=23]: form
                        variableReference[l=39,c=29]: rythm
PipeExpression[l=42,c=0]:
    inlineFuncCall: export
        arguments:
            stringLiter: demo2.mid
    PipeExpression[l=42,c=0]:
        inlineFuncCall: song
            arguments:
                IntLiteral[l=43,c=9]: 120
                IntLiteral[l=43,c=14]: 60
        ArrayExpression[l=42,c=0]:
            PipeExpression[l=42,c=2]:
                inlineFuncCall: track
                    arguments:
                        variableReference[l=42,c=13]: Piano
                variableReference[l=42,c=2]: a
            variableReference[l=42,c=21]: b
            LambdaCall[l=42,c=24]:
                FunctionCall[l=42,c=24]:
                    name: markov
                    arguments:
                        ArrayExpression[l=42,c=31]:
                            stringLiter: song1.mid
                            stringLiter: song2.mid
                        IntLiteral[l=42,c=59]: 1
                arguments:
                    NoteExpression[l=42,c=62]:
                        pitch: C
                        octave:
                            IntLiteral[l=42,c=66]: 4
                        duration: q
            PipeExpression[l=42,c=73]:
                inlineFuncCall: track
                    arguments:
                        variableReference[l=42,c=113]: BagPipe
                PipeExpression[l=42,c=73]:
                    inlineFuncCall: randGen
                        arguments:
                            ArrayExpression[l=42,c=94]:
                                NoteExpression[l=42,c=95]:
                                    duration: q
                                NoteExpression[l=42,c=98]:
                                    duration: w
                                NoteExpression[l=42,c=101]:
                                    duration: h
                    ArrayExpression[l=42,c=73]:
                        NoteExpression[l=42,c=74]:
                            pitch: C
                        NoteExpression[l=42,c=77]:
                            pitch: E
                        NoteExpression[l=42,c=80]:
                            pitch: G
Declaration[l=47,c=0]:
    type: inference
    name: x2
    AddExpression[l=47,c=10]:
        PipeExpression[l=47,c=10]:
            inlineFuncCall: len
            PipeExpression[l=47,c=10]:
                inlineFuncCall: dot
                    arguments:
                        AddExpression[l=47,c=44]:
                            MinusExpression[l=47,c=44]:
                                AddExpression[l=47,c=44]:
                                    IntLiteral[l=47,c=44]: 1
                                    MulExpression[l=47,c=46]:
                                        IntLiteral[l=47,c=46]: 3
                                        PowExpression[l=47,c=48]:
                                            IntLiteral[l=47,c=48]: 4
                                            IntLiteral[l=47,c=50]: 7
                                IntLiteral[l=47,c=52]: 1
                            MulExpression[l=47,c=54]:
                                DivExpression[l=47,c=54]:
                                    IntLiteral[l=47,c=54]: 3
                                    IntLiteral[l=47,c=56]: 6
                                IntLiteral[l=47,c=58]: 12
                PipeExpression[l=47,c=10]:
                    inlineFuncCall: concat
                        arguments:
                            ArrayExpression[l=47,c=30]:
                                IntLiteral[l=47,c=31]: 3
                                IntLiteral[l=47,c=33]: 4
                    ArrayExpression[l=47,c=10]:
                        IntLiteral[l=47,c=11]: 0
                        IntLiteral[l=47,c=14]: 1
                        IntLiteral[l=47,c=17]: 2
        IntLiteral[l=47,c=69]: 2